// schema.prisma untuk SI Surat Kelurahan Liliba

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  WARGA
  RT
  STAFF
  LURAH
  SUPERADMIN
}

enum JenisKelamin {
  LAKI_LAKI
  PEREMPUAN
}

enum StatusHidup {
  HIDUP
  MENINGGAL
}

enum StatusSurat {
  DIAJUKAN
  DIVERIFIKASI_STAFF
  DITOLAK_STAFF
  DIVERIFIKASI_RT
  DITOLAK_RT
  DIVERIFIKASI_LURAH
  DITOLAK_LURAH
  DITERBITKAN
}

enum PeranKeluarga {
  KEPALA_KELUARGA
  ISTRI
  ANAK
  ORANG_TUA
  FAMILI_LAINNYA
}

enum StatusPerkawinan {
  BELUM_KAWIN
  KAWIN
  CERAI_HIDUP
  CERAI_MATI
}

model User {
  id             String  @id @default(dbgenerated("concat('usr_', gen_random_uuid())")) @db.VarChar(40)
  username       String  @unique
  password       String
  role           Role    @default(WARGA)
  email          String? @unique
  numberWhatsApp String? @unique

  rememberToken     String?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  extraRoles        Role[]
  profil            Warga?
  suratDiajukan     Surat[]    @relation("PemohonSurat")
  suratSebagaiStaff Surat[]    @relation("StaffVerifikasi")
  suratSebagaiLurah Surat[]    @relation("LurahVerifikasi")
  RTProfile         RTProfile?
  suratSebagaiRT    Surat[]    @relation("RTVerifikasi")

  Surat Surat[]
  // UserRole UserRole[]
}

model RTProfile {
  id          String  @id @default(dbgenerated("concat('rtp_', gen_random_uuid())")) @db.VarChar(40)
  userId      String  @unique @map("rtp_user_id")
  namaLengkap String?
  nik         String  @unique
  user        User    @relation(fields: [userId], references: [id])
  rt          String
  rw          String?
  wilayah     String? // Optional untuk deskripsi area RT
}

model Warga {
  id     String @id @default(dbgenerated("concat('wrg_', gen_random_uuid())")) @db.VarChar(40)
  userId String @unique @map("wrg_user_id")
  user   User   @relation(fields: [userId], references: [id])

  namaLengkap      String
  nik              String            @unique
  tempatLahir      String?
  tanggalLahir     DateTime?
  jenisKelamin     JenisKelamin
  pekerjaan        String?
  agama            String?
  foto             String?
  statusHidup      StatusHidup?      @default(HIDUP)
  statusPerkawinan StatusPerkawinan? @default(BELUM_KAWIN)

  fileKtp String?
  fileKk  String?

  kartuKeluargaId String?        @map("wrg_kk_id")
  kartuKeluarga   KartuKeluarga? @relation("AnggotaKK", fields: [kartuKeluargaId], references: [id])

  peranDalamKK PeranKeluarga?
  kepalaDariKK KartuKeluarga? @relation("KepalaKeluarga")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model KartuKeluarga {
  id               String @id @default(dbgenerated("concat('kk_', gen_random_uuid())")) @db.VarChar(40)
  nomorKK          String @unique
  kepalaKeluargaId String @unique @map("kk_kepala_id")
  kepalaKeluarga   Warga  @relation("KepalaKeluarga", fields: [kepalaKeluargaId], references: [id])

  alamat String
  rt     String?
  rw     String?

  anggota   Warga[]  @relation("AnggotaKK")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Surat {
  id           String     @id @default(dbgenerated("concat('srt_', gen_random_uuid())")) @db.VarChar(40)
  idJenisSurat String     @map("srt_jenis_id")
  jenis        JenisSurat @relation(fields: [idJenisSurat], references: [id])

  idPemohon String @map("srt_pemohon_id")
  pemohon   User   @relation("PemohonSurat", fields: [idPemohon], references: [id])

  alasanPengajuan String?
  dataSurat       Json? // ‚Üê Data khusus per jenis surat

  status           StatusSurat @default(DIAJUKAN)
  tanggalPengajuan DateTime?   @default(now())

  // RT
  idRT                String?   @map("srt_rt_id")
  rt                  User?     @relation("RTVerifikasi", fields: [idRT], references: [id])
  tanggalVerifikasiRT DateTime?
  catatanPenolakanRT  String?

  // Staff
  idStaff                String?   @map("srt_staff_id")
  staff                  User?     @relation("StaffVerifikasi", fields: [idStaff], references: [id])
  tanggalVerifikasiStaff DateTime?
  catatanPenolakan       String?

  // Lurah
  idLurah                String?   @map("srt_lurah_id")
  lurah                  User?     @relation("LurahVerifikasi", fields: [idLurah], references: [id])
  tanggalVerifikasiLurah DateTime?

  // File Umum
  fileKtp            String?
  fileKk             String?
  noSuratPengantar   String?
  fileSuratPengantar String?
  fileSuratTerbit    String?

  noSurat String? @unique
  userId  String? @map("srt_user_id")
  User    User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JenisSurat {
  id        String  @id @default(dbgenerated("concat('js_', gen_random_uuid())")) @db.VarChar(40)
  kode      String  @unique
  nama      String
  deskripsi String?
  aktif     Boolean @default(true)
  surat     Surat[]
}

model Setting {
  id        String   @id @default("stg_global") @db.VarChar(20) // stg_global (singleton)
  key       String   @unique
  value     String
  updatedAt DateTime @updatedAt
}
